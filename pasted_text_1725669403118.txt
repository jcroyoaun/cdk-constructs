for ts in $(find . -type f -name "*.ts"); do echo "$ts" && cat $ts; done
./lib/utils/config-loader.ts
import * as fs from 'fs';
import * as yaml from 'js-yaml';
import * as path from 'path';

class YamlReader {
  static readValue(filePath: string): any {
    try {
      const fullPath = path.resolve(__dirname, '..', filePath);
      console.log(`Attempting to read YAML file from: ${fullPath}`);
      
      const fileContents = fs.readFileSync(fullPath, 'utf8');
      const data = yaml.load(fileContents) as any;
      return data;
    } catch (error) {
      console.error(`Error reading YAML file: ${error}`);
      throw error;
    }
  }
}

function validateParams(...params: any[]): boolean {
  const invalidParams = params.filter(param => param === undefined || param === null);
  
  if (invalidParams.length > 0) {
    console.error(`Validation failed. The following parameters are invalid:`, invalidParams);
    return false;
  }
  
  console.log('All parameters are valid.');
  return true;
}


export class ConfigProvider {
  private static instance: ConfigProvider;
  private config: any;

  private constructor(configPath: string) {
    this.config = YamlReader.readValue(configPath);
  }

  static getInstance(configPath?: string): ConfigProvider {
    if (!ConfigProvider.instance) {
      if (!configPath) {
        throw new Error('Config path must be provided when initializing ConfigProvider');
      }
      ConfigProvider.instance = new ConfigProvider(configPath);
    }
    return ConfigProvider.instance;
  }

  getConfig(): any {
    return this.config;
  }
}
./lib/vpc/vpc-construct.ts
import * as ec2 from 'aws-cdk-lib/aws-ec2';
import { Construct } from 'constructs';
import { ConfigProvider, validateParams } from './config-loader';

export class VpcConstruct extends Construct {
  public readonly vpc: ec2.Vpc;

  constructor(scope: Construct, id: string) {
    super(scope, id);

    const config = ConfigProvider.getInstance().getConfig();
    const vpcConfig = config.vpc;


    this.vpc = new ec2.Vpc(this, vpcConfig.name, {
      ipAddresses: ec2.IpAddresses.cidr(vpcConfig.cidr),
      maxAzs: vpcConfig.maxAzs,
      natGateways: vpcConfig.natGateways,
      subnetConfiguration: [
        {
          cidrMask: vpcConfig.subnets.public.cidr,
          name: vpcConfig.subnets.public.name,
          subnetType: ec2.SubnetType.PUBLIC,
        },
        {
          cidrMask: vpcConfig.subnets.private.cidr,
          name: vpcConfig.subnets.private.name,
          subnetType: ec2.SubnetType.PRIVATE_WITH_EGRESS,
        },
        {
          cidrMask: vpcConfig.subnets.db.cidr,
          name: vpcConfig.subnets.db.name,
          subnetType: ec2.SubnetType.PRIVATE_ISOLATED,
        },
      ],
    });
  }
}
./lib/index.ts
export * from './vpc/vpc-construct';

